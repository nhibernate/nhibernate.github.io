---
layout: post
title: "Prepare your system for NHibernate"
date: 2008-09-06 22:12:52 +1200
comments: true
published: true
categories: ["blogs", "nhibernate", "archive"]
tags: ["introduction"]
redirect_from: ["/blogs/nhibernate/archive/2008/09/06/prepare-your-system-for-nhibernate.aspx/", "/blogs/nhibernate/archive/2008/09/06/prepare-your-system-for-nhibernate.html"]
author: gabriel.schenker
gravatar: c6b14f5727ae60868a29322c6395bd4d
---
{% include imported_disclaimer.html %}

<p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_4.png"><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="21" alt="Blog Signature Gabriel" src="/images/posts/2008/09/05/Blog-Signature-Gabriel_5F00_thumb_5F00_1.png" width="244" border="0"></a> </p> <p>In this post I'll introduce how to prepare a developer machine to use <strong>NHibernate</strong> as a <em>ORM</em> (Object Relational Modeling) tool.</p> <p>This approach describes the <strong>minimal</strong> setup needed to use NHibernate when developing an application. </p> <p>In this article the focus is on <a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a> (Test Driven Development) and we want to approach the topic by adhering to <a href="http://de.wikipedia.org/wiki/Domain-Driven_Design">DDD</a> (Domain Driven Design). Although NHibernate can also be used to generate the domain model by starting from an existing database schema I'll concentrate on the opposite direction and start with a domain model first and let NHibernate generate the database schema from the model (and the mapping meta data).</p> <h2>How to start</h2> <p>First you have to download NHibernate. Since NHibernate is an open source project anybody has free access to the (most current) binaries and/or source code. The source code is stored in a SVN repository (<a href="http://subversion.tigris.org/">Subversion</a> Source Control System) and can be found <a href="https://nhibernate.svn.sourceforge.net/svnroot/nhibernate/trunk/">here</a>. The most current source code is called the "trunk". </p> <h3>The Operating System</h3> <p>I expect you are working on a machine with one of the following operating systems</p> <ul> <li>Windows XP SP2,  <li>Windows VISTA,  <li>Windows Server 2003 or  <li>Windows Server 2008. </li></ul> <h3>Which version of Visual Studio</h3> <p>We use the brand new <strong>NHibernate 2.0 Alpha 1</strong> version. This version of NHibernate can work either with .NET 2.0 or .NET 3.5. For the former version you should have at least Visual Studio 2005 Professional installed and for the latter you need at least VS 2008 Professional. Of course you can also work with the Express Edition but they have some serious limitations (e.g. you cannot use any Add-In with VS). Now if you have some money left I strongly recommend you install the <a href="http://www.jetbrains.com/resharper/">ReSharper</a> Add-In as your productivity tool. I promise you it'll boost your productivity by factors! This investment is worth every penny.</p> <h2>Download the NHibernate binaries</h2> <p>You can grab the latest NHibernate binaries <a href="http://sourceforge.net/project/showfiles.php?group_id=73818">here</a>. At the time being this is the Alpha 1 release of the version2.0.0. Download the file "<strong>NHibernate-2.0.0.Alpha1-bin.zip</strong>". Extract the zip files to a folder where you will place all your Open Source Software (OSS). That is create a new folder, e.g. "<strong>m:\dev\OSS\NHibernate</strong>" and extract the binaries to this folder. The binaries are compiled against .NET 2.0. If you prefer to have binaries compiled agains .NET 3.5 you have to build NHibernate from the trunk as described in the next chapter. Otherwise you can skip the following chapter and move directly to the chapter "<strong>Prepare for TDD</strong>".</p> <h2>Build NHibernate from the Trunk</h2> <p>To download the source code you need a SVN client application installed on your developer machine. There exist various open source as well as commercial clients. One of the most known (open source) clients is <strong>TortoiseSVN</strong> and can be found <a href="http://tortoisesvn.tigris.org/">here</a>. <strong>TortoiseSVN</strong> integrates very nicely with Windows Explorer. Download and install it on your machine. Restart your machine after the installation.</p> <h4>Download the NHibernate Source Code</h4> <p>Create a (sub-)directory OSS (Open Source Software; e.g. m:\dev\OSS). Create a subdirectory NHibernate within the OSS directory.</p> <p>Right click on the NHibernate directory and choose the context menu "<strong>SVN checkout...". </strong>In the dialog box enter the url to the trunk as shown below. Double check the checkout directory and then press OK.</p> <p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_2.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="328" alt="TortoiseSVN download dialog" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb.png" width="470" border="0"></a> </p> <p>The SVN client will immediately start to download the NHibernate source code as well as the documentation. Depending on the speed of your Internet connection this may take some time to finish. You should see some thing like this</p> <p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_4.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="363" alt="TortoiseSVN download progress dialog" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_1.png" width="566" border="0"></a> </p> <p>When the download is completed we can now compile NHibernate (remember: we have downloaded the source code and not the binaries!). Don't fear, this is an automated process. But wait, for this to work we need <strong>NAnt</strong>, another open source tool. </p> <h3>Download and install NAnt</h3> <p>You can get the latest release of NAnt <a href="http://nant.sourceforge.net/">here</a>. This time we download the binaries (and not the source code) since it is "only" a helper tool for now. At the time of this writing I recommend downloading the <strong>0.86 Beta 1</strong> release since this release is the first one that can compile .NET 3.5 projects.</p> <p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_6.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="381" alt="NAnt" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_2.png" width="287" border="0"></a> </p> <p>Download and extract the NAnt binaries (nant-0.86-beta1-bin.zip) into a directory on your developer machine (e.g. m:\dev\OSS\NAnt).</p> <h3>Compile NHibernate</h3> <p>Now it's definitively time to compile NHibernate. Open a console and go to the root directory of the NHibernate source (e.g. m:\dev\OSS\NHibernate\nhibernate). There you should find amongst others a file called <strong>default.build</strong>. This file contains the instructions for NAnt how to compile NHibernate. You can either compile NHibernate for .NET 3.5 (it's the default) or for .NET 2.0. In the console enter the following commands for the 2 scenarios (assuming you have NAnt installed in the same OSS folder as NHibernate)</p> <ul> <li>For .Net 3.5 (default) <br>..\..\nant\bin\nant.exe  <li>For .NET 2.0 <br>..\..\nant\bin\nant.exe "-t:net-2.0" </li></ul> <p>The source code should now be compiled and after some time you should see some thing like this</p> <p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_8.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="644" alt="image" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_3.png" width="681" border="0"></a> </p> <p>It's important that the second last line states "BUILD SUCCEEDED".</p> <p>After compiling the source code you should find a new sub-folder "build" in your NHibernate folder which contains all the binaries. Depending on the chosen scenario you will find the binaries in either a sub-folder "<strong>net-3.5</strong>" or "<strong>net-2.0"</strong>. Didn't I tell you that it's easy...!</p> <h2>Prepare for TDD</h2> <p>Are we ready now? Nope! Since we're proud fellows of the <a href="http://altnetpedia.com">ALT.NET</a> way we don't want just start coding. No, we do <a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a>. Doing so we need a test framework. There exist several well known frameworks (e.g. <a href="http://www.nunit.org/index.php">NUnit</a>, <a href="http://www.mbunit.com/">MbUnit</a>, <a href="http://www.codeplex.com/xunit">XUnit</a>, etc.). In our examples we either use NUnit or MbUnit. Let's start with NUnit since NHibernate uses it too for its own test (you can download it from <a href="http://www.nunit.org/index.php">here</a>). Note: we don't have to download it, since we can use the binaries provided with NHibernate (the only files we actually need are <strong>nunit.framework.dll</strong> and <strong>nuni.core.dll</strong>).</p> <h3>Team development and Continuous Integration</h3> <p>Although this article doesn't explain these two topics you still should be prepared to develop in a team and to use <a href="http://martinfowler.com/articles/continuousIntegration.html">continuous integration</a>. Why do I mention this? Well, we should do some further configuration of our environment to be prepared for this situations. Since it's easy to do - why not do it NOW...</p> <p>A solution at best should have <strong>no</strong> external dependencies (ok, .NET we don't count here). If it has, then these dependencies should become a part of the solution (setup). What does this mean for us? Well our projects will have external dependencies, NHibernate is one of them. Another one is NUnit and still another one the database we'll use. A possible solution for this scenario is to <strong>not</strong> rely on assemblies registered in the GAC or any other "common" or "programs" folders of the system. Instead create a directory called e.g. SharedLibs which will be part of your solution and copy all external assemblies into this folder. The solution then only references external assemblies from this folder (an exception are all the .NET assemblies). If you use a source control system (and you should!) then put this folder under version control too!</p> <h3>Our first project</h3> <p>Create a folder FirstSample (e.g. m:\dev\projects\FirstSolution). Create a sub-folder SharedLibs. Copy the following assemblies into this folder (from the NHibernate bin folder which was created during compilation of NHibernate)</p> <ul> <li>nunit.framework.dll  <li>nuni.core.dll  <li>nhibernate.dll  <li>iesi.collections.dll  <li>Castle.DynamicProxy2.dll  <li>Castle.Core.dll  <li>log4net.dll </li></ul> <p>Create a sub-folder src (e.g. m:\dev\projects\FirstSolution\src).</p> <p>Run VS 2008 and create a new solution. Choose C# Class Library as Template and call it <strong>FirstSolution</strong>. Choose "m:\dev\projects\FirstSolution\src" as location and uncheck "Create directory for solution". Click OK now.</p> <p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_10.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="574" alt="image" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_4.png" width="808" border="0"></a> </p> <p>Immediately add an additional class library project to the solution and call it FirstSolution.Tests. This project will contain all our test classes (remember we're doing TDD). You should then have a structure similar to this one:</p> <p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_12.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="261" alt="image" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_5.png" width="296" border="0"></a> </p> <h2>Summary</h2> <p>In this article I have shown how to prepare a developer machine for using the very latest version of NHibernate as an <em>ORM tool</em> in an application that is developed by using TDD and DDD. First we installed the prerequisites then we either downloaded the NHibernate binaries or we download and compiled the source code of NHibernate and finally we prepared a first .NET solution to start with.</p> <p>In <a href="http://www.nhforge.org/wikis/howtonh/your-first-nhibernate-based-application.aspx">this article</a> I discuss how implement this very first NHibernate based solution.</p> <p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_2.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="17" alt="Blog Signature Gabriel" src="/images/posts/2008/09/06/Blog-Signature-Gabriel_5F00_thumb.png" width="240" border="0"></a></p>
